<?php
/**
 * ProtocolosHabilitacaoApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Intima.ai - API
 *
 * Bem vindo a documentação da API do [Intima.ai](https://app.intima.ai). Está documentação cobre todas as ações disponíveis dentro do Intima.ai e as disponibilizam como `ENDPOINTS` que podem ser integrados e utilizados por outros serviços ou aplicações, bastando somente possuir o `Token de acesso da API`.
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.11
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\Model\ProtocoloHabilitacao;
use Swagger\Client\ObjectSerializer;

/**
 * ProtocolosHabilitacaoApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProtocolosHabilitacaoApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createProcessProtocoloHabilitacao
     *
     * Realiza um novo protocolo de habilitação
     *
     * @param ProtocoloHabilitacao $protocoloHabilitacao protocoloHabilitacao (required)
     * @param int $protocolo_habilitacao_id protocolo_habilitacao_id (required)
     *
     * @return array
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createProcessProtocoloHabilitacao(ProtocoloHabilitacao $protocoloHabilitacao, $protocolo_habilitacao_id)
    {
        return $this->createProcessProtocoloHabilitacaoWithHttpInfo($protocoloHabilitacao, $protocolo_habilitacao_id);
    }

    /**
     * Operation createProcessProtocoloWithHttpInfo
     *
     * Realiza um novo protocolo de habilitação
     *
     * @param ProtocoloHabilitacao $protocoloHabilitacao protocoloHabilitacao (required)
     * @param int $protocolo_habilitacao_id protocolo_habilitacao_id (required)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \GuzzleHttp\Exception\GuzzleException
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createProcessProtocoloHabilitacaoWithHttpInfo(ProtocoloHabilitacao $protocoloHabilitacao, $protocolo_habilitacao_id)
    {
        $returnType = '';
        $request = $this->createProcessProtocoloHabilitacaoRequest($protocoloHabilitacao, $protocolo_habilitacao_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return ['status_code' => $statusCode, 'data' => $response->getBody()->getContents()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createProcessProtocoloAsync
     *
     * Realiza um novo protocolo de habilitação
     *
     * @param ProtocoloHabilitacao $protocoloHabilitacao protocoloHabilitacao (required)
     * @param int $protocolo_habilitacao_id protocolo_habilitacao_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProcessProtocoloHabilitacaoAsync(ProtocoloHabilitacao $protocoloHabilitacao, $protocolo_habilitacao_id)
    {
        return $this->createProcessProtocoloHabilitacaoAsyncWithHttpInfo($protocoloHabilitacao, $protocolo_habilitacao_id)
            ->then(
                function ($response) {
                    return $response;
                }
            );
    }

    /**
     * Operation createProcessProtocoloAsyncWithHttpInfo
     *
     * Realiza um novo protocolo de habilitação
     *
     * @param ProtocoloHabilitacao $protocoloHabilitacao protocoloHabilitacao (required)
     * @param int $protocolo_habilitacao_id protocolo_habilitacao_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProcessProtocoloHabilitacaoAsyncWithHttpInfo(ProtocoloHabilitacao $protocoloHabilitacao, $protocolo_habilitacao_id)
    {
        $returnType = '';
        $request = $this->createProcessProtocoloHabilitacaoRequest($protocoloHabilitacao, $protocolo_habilitacao_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return ['status_code' => $response->getStatusCode(), 'data' => $response->getBody()->getContents()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createProcessProtocoloHabilitacao'
     *
     * @param ProtocoloHabilitacao $protocoloHabilitacao protocoloHabilitacao (required)
     * @param int $protocolo_habilitacao_id protocolo_habilitacao_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createProcessProtocoloHabilitacaoRequest(ProtocoloHabilitacao $protocoloHabilitacao, $protocolo_habilitacao_id)
    {
        // verify the required parameter 'tipo_documento_mensagem_geral' is set
        if ($protocoloHabilitacao->getTipoDocumentoMensagemGeral() === null || (is_array($protocoloHabilitacao->getTipoDocumentoMensagemGeral()) && count($protocoloHabilitacao->getTipoDocumentoMensagemGeral()) === 0)) {
            throw new \InvalidArgumentException(
                "O parametro 'tipo_documento_mensagem_geral' é obrigatório!"
            );
        }
        // verify the required parameter 'tipo_solicitacao' is set
        if ($protocoloHabilitacao->getTipoSolicitacao() === null || (is_array($protocoloHabilitacao->getTipoSolicitacao()) && count($protocoloHabilitacao->getTipoSolicitacao()) === 0)) {
            throw new \InvalidArgumentException(
                "O parametro 'tipo_solicitacao' é obrigatório!"
            );
        }
        // verify the required parameter 'tipo_declaracao' is set
        if ($protocoloHabilitacao->getTipoDeclaracao() === null || (is_array($protocoloHabilitacao->getTipoDeclaracao()) && count($protocoloHabilitacao->getTipoDeclaracao()) === 0)) {
            throw new \InvalidArgumentException(
                "O parametro 'tipo_declaracao' é obrigatório!"
            );
        }
        // verify the required parameter 'polo' is set
        if ($protocoloHabilitacao->getPolo() === null || (is_array($protocoloHabilitacao->getPolo()) && count($protocoloHabilitacao->getPolo()) === 0)) {
            throw new \InvalidArgumentException(
                "O parametro 'polo' é obrigatório!"
            );
        }
        // verify the required parameter 'partes_vinculadas' is set
        if ($protocoloHabilitacao->getPartesVinculadas() === null || (is_array($protocoloHabilitacao->getPartesVinculadas()) && count($protocoloHabilitacao->getPartesVinculadas()) === 0)) {
            throw new \InvalidArgumentException(
                "O parametro 'partes_vinculadas' é obrigatório!"
            );
        }
        // verify the required parameter 'pje_auth_id' is set
        if ($protocolo_habilitacao_id === null || (is_array($protocolo_habilitacao_id) && count($protocolo_habilitacao_id) === 0)) {
            throw new \InvalidArgumentException(
                "O parametro 'protocolo_habilitacao_id' é obrigatório!"
            );
        }

        $resourcePath = '/actions/process-protocol-habilitacao/{protocolo_habilitacao_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = true;


        // path params
        if ($protocolo_habilitacao_id !== null) {
            $resourcePath = str_replace(
                '{' . 'protocolo_habilitacao_id' . '}',
                ObjectSerializer::toPathValue($protocolo_habilitacao_id),
                $resourcePath
            );
        }

        // form params
        if ($protocoloHabilitacao->getTipoDocumentoMensagemGeral() !== null) {
            $formParams['tipo_documento_mensagem_geral'] = ObjectSerializer::toFormValue($protocoloHabilitacao->getTipoDocumentoMensagemGeral());
        }
        // form params
        if ($protocoloHabilitacao->getDocumentos() !== null) {
            $formParams['documentos'] = ObjectSerializer::toFormValue($protocoloHabilitacao->getDocumentos());
        }
        // form params
        if ($protocoloHabilitacao->getMensagemGeral() !== null) {
            $formParams['mensagem_geral'] = ObjectSerializer::toFormValue($protocoloHabilitacao->getMensagemGeral());
        }
        // form params
        if ($protocoloHabilitacao->getDescricao() !== null) {
            $formParams['descricao'] = ObjectSerializer::toFormValue($protocoloHabilitacao->getDescricao());
        }
        // form params
        if ($protocoloHabilitacao->getTipoSolicitacao() !== null) {
            $formParams['tipo_solicitacao'] = ObjectSerializer::toFormValue($protocoloHabilitacao->getTipoSolicitacao());
        }
        // form params
        if ($protocoloHabilitacao->getTipoDeclaracao() !== null) {
            $formParams['tipo_declaracao'] = ObjectSerializer::toFormValue($protocoloHabilitacao->getTipoDeclaracao());
        }
        // form params
        if ($protocoloHabilitacao->getPolo() !== null) {
            $formParams['polo'] = ObjectSerializer::toFormValue($protocoloHabilitacao->getPolo());
        }
        // form params
        if ($protocoloHabilitacao->getPartesVinculadas() !== null) {
            $index = 0;
            foreach ($protocoloHabilitacao->getPartesVinculadas() as $parte) {
                $item = "partes_vinculadas[$index]";
                $formParams[$item] = ObjectSerializer::toFormValue($parte);
                $index++;
            }
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {

                $multipartContents = [];

                foreach ($formParams as $formParamName => $formParamValue) {
                    if (!is_array($formParamValue))
                    {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValue
                        ];
                    }
                    else {
                        $multipartContents = array_merge($multipartContents, $this->serializeObjectRequest($formParamValue));
                    }
                }

                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api_token');
        if ($apiKey !== null) {
            $queryParams['api_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    protected function serializeObjectRequest($formParam)
    {
        $index = 0;
        $multipartContents = [];
        foreach ($formParam as $doc) {

            if (($doc['arquivo'] === null || empty($doc['arquivo'])) ||
//                ($doc['tipo_documento'] === null || empty($doc['tipo_documento'])) ||
                ($doc['descricao_documento'] === null || empty($doc['descricao_documento'])) ||
                ($doc['order'] === null || empty($doc['order']))) {
                throw new \InvalidArgumentException(
                    "O parametro 'documentos' é obrigatório!"
                );
            }

            $multipartContents[] = [
                'name' => "documentos[$index][arquivo]",
                'contents' => $doc['arquivo']
            ];

            $multipartContents[] = [
                'name' => "documentos[$index][tipo_documento]",
                'contents' => $doc['tipo_documento']
            ];
            $multipartContents[] = [
                'name' => "documentos[$index][descricao_documento]",
                'contents' => $doc['descricao_documento']
            ];
            $multipartContents[] = [
                'name' => "documentos[$index][order]",
                'contents' => $doc['order']
            ];

            $index++;
        }

        return $multipartContents;
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
